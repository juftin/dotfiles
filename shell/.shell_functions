##########################################################
################### SHELL FUNCTIONS ######################
##########################################################

#############################################
# dotfiles-git
# -------------------------------------------
# Run a git command in the dotfiles directory
#############################################
dotfiles-git() {
    local DOTFILES_DIR="${DOTFILES_DIR:-${HOME}/.dotfiles}"
    local GIT_COMMAND="git ${*}"
	log_event "info" "${PURPLE}[${DOTFILES_DIR}]${NO_COLOR} ${CYAN}${GIT_COMMAND}${NO_COLOR} ðŸ“‚"
    runin "${DOTFILES_DIR}" "${GIT_COMMAND}"
}

#############################################
# dotfiles-sync
# -------------------------------------------
# Sync the dotfiles
#############################################
dotfiles-sync() {
    log_event "info" "Syncing dotfiles ðŸ”„"
	dotfiles-git pull --recurse-submodules --jobs=4
	log_event "info" "Dotfiles synced successfully ðŸŽ‰"
}

#############################################
# dotfiles-bootstrap
# -------------------------------------------
# Bootstrap the dotfiles
#############################################
dotfiles-bootstrap() {
    local DOTFILES_DIR="${DOTFILES_DIR:-${HOME}/.dotfiles}"
    bash "${DOTFILES_DIR}/bootstrap/bootstrap.sh"
}

#############################################
# dotfiles-deps
# -------------------------------------------
# Install dependencies from Brewfile or Aptfile
#############################################
dotfiles-deps() {
    local DOTFILES_DIR="${DOTFILES_DIR:-${HOME}/.dotfiles}"
    OS_NAME=$(uname -s)
    if [[ ${OS_NAME} == "Darwin" ]]; then
        if ! command -v brew &>/dev/null; then
            echo "Error: Homebrew is not installed."
            return 1
        fi
        log_event "info" "Installing packages from Brewfile ðŸ“¦"
        brew bundle --file="${DOTFILES_DIR}/macos/Brewfile"
    elif [[ ${OS_NAME} == "Linux" ]]; then
        if ! command -v apt &>/dev/null; then
            echo "Error: apt is not installed."
            return 1
        fi
        log_event "info" "Installing packages from Aptfile ðŸ“¦"
        bash "${DOTFILES_DIR}/bin/aptfile" "${DOTFILES_DIR}/linux/Aptfile"
    else
        log_event "error" "Unsupported OS: ${OS_NAME}"
        return 1
    fi
    log_event "info" "Dependencies installed successfully ðŸŽ‰"
}

##########################################################
######################### SEARCH #########################
##########################################################

#############################################
# f
# -------------------------------------------
# Find a file by name
#############################################
f() {
	find . -iname "*$1*" ${@:2}
}

#############################################
# r
# -------------------------------------------
# Grep recursively
#############################################
r() {
	grep "$1" ${@:2} -R .
}

##########################################################
###################### DIRECTORIES #######################
##########################################################

#############################################
# ideacd
# -------------------------------------------
# Open a directory in the IDE and switch to it
#############################################
ideacd() {
    local dest="$(realpath "${1}")"
    if [ -z "${dest}" ]; then
        log_event "error" "Usage: ideacd ${BLUE}<directory>${NO_COLOR}"
        return 1
    fi
    if [[ -d "${dest}" ]]; then
        idea "${dest}" || return 1
        cd "${dest}" || return 1
    else
        log_event "error" "Directory not found: ${BLUE}${dest}${NO_COLOR}"
        return 1
    fi
}

#############################################
# mkcd
# -------------------------------------------
# Create a directory and change to it
#############################################
mkcd() {
	mkdir -p "$@" && cd "$_"
}

#############################################
# mktmpdir
# -------------------------------------------
# Create a temporary directory
#############################################
mktmpdir() {
  test -z "$TMPDIR" && TMPDIR="$(mktemp -d)"
  mkdir -p "${TMPDIR}"
  echo "${TMPDIR}"
}

#############################################
# runin
# -------------------------------------------
# Run command in another directory and return
#############################################
runin() {
    if [ "${#}" -lt 2 ]; then
        log_event "error" "Usage: runin ${BLUE}<directory>${NO_COLOR} ${CYAN}<command>${NO_COLOR}"
        return 1
    fi
    local dir="${1}"
    shift
    local cmd="${*}"
    local current_dir=$(pwd)
    if [ "${current_dir}" = "$(realpath "${dir}")" ]; then
        if ! eval "${cmd}"; then
            log_event "error" "Command failed in ${BLUE}${dir}${NO_COLOR}: ${RED}${cmd}${NO_COLOR}"
            return 1
        fi
        return 0
    fi
    pushd "${dir}" &>/dev/null || {
        log_event "error" "Failed to change to directory: ${BLUE}${dir}${NO_COLOR}"
        return 1
    }
    if ! eval "${cmd}"; then
        log_event "error" "Command failed in ${BLUE}${dir}${NO_COLOR}: ${RED}${cmd}${NO_COLOR}"
        popd &>/dev/null
        return 1
    fi
    popd &>/dev/null || log_event "warning" "Failed to return to previous directory."
}

##########################################################
########################## GIT ###########################
##########################################################

#############################################
# check
# -------------------------------------------
# Checkout a branch
#############################################
check() {
	git checkout $1
}

#############################################
# git-remove-deleted
# -------------------------------------------
# Remove branches that have been deleted
#############################################
git-remove-deleted() {
	git fetch -p
	for branch in $(git branch -vv | grep ': gone]' | awk '{print $1}'); do
		git branch -D $branch
	done
}

#############################################
# git-tree
# -------------------------------------------
# Display a tree considering .gitignore
#############################################
git-tree() {
    tree -C -I $((cat .gitignore 2> /dev/null || cat $(git rev-parse --show-toplevel 2> /dev/null)/.gitignore 2> /dev/null || echo "node_modules") | egrep -v "^#.*$|^[[:space:]]*$" | tr "\\n" "|" | rev | cut -c 2- | rev)
}

##########################################################
######################### MISC ###########################
##########################################################

#############################################
# is_command
# -------------------------------------------
# Check if a command exists
#############################################
is_command() {
  command -v "$1" >/dev/null
}

#############################################
# date_iso8601
# -------------------------------------------
# Generate an ISO8601 formatted date string
#############################################
date_iso8601() {
  date -u +%Y-%m-%dT%H:%M:%S+0000
}

#############################################
# hash_sha256
# -------------------------------------------
# Generate a SHA-256 hash of a file, string, or stdin
# If no input is provided, generate a hash
#############################################
hash_sha256() {
  if [ -p /dev/stdin ]; then
    cat - | shasum -a 256 | awk '{print $1}'
  elif [ -n "$1" ]; then
    if [ -f "$1" ]; then
      shasum -a 256 "${1}" | awk '{print $1}'
    else
      printf '%s' "${1}" | shasum -a 256 | awk '{print $1}'
    fi
  else
    printf '%s' "$(date +%s)$(openssl rand -hex 12)" | shasum -a 256 | awk '{print $1}'
  fi
}

#############################################
# untar
# -------------------------------------------
# Unpack a tarball or zip file
#############################################
untar() {
  tarball=${1}
  output_dir=${2:-$(pwd)}

  # Create output directory if it does not exist
  mkdir -p "${output_dir}"

  case "${tarball}" in
    *.tar.gz | *.tgz) tar -xzf "${tarball}" -C "${output_dir}" ;;
    *.tar) tar -xf "${tarball}" -C "${output_dir}" ;;
    *.zip) unzip -d "${output_dir}" "${tarball}" ;;
    *.whl) unzip -d "${output_dir}" "${tarball}" ;;
    *)
      log_err "untar unknown archive format for ${tarball}"
      return 1
      ;;
  esac
}

##########################################################
######################### AWS ############################
##########################################################

#############################################
# aws-docker-login
# -------------------------------------------
# Login to AWS ECR
#############################################
aws-docker-login() {
	AWS_DOCKER_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
	aws ecr get-login-password \
		--region us-east-1 |
		docker login \
			--username AWS \
			--password-stdin ${AWS_DOCKER_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
}

##########################################################
####################### LOGGING ##########################
##########################################################

NO_COLOR='\033[0m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
RED='\033[0;31m'
ORANGE='\033[0;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'

#############################################
# log_event
# -------------------------------------------
# Log an event
#############################################
log_event() {
	LOGGING_TIMESTAMP="${BLUE}$(date +"%F %T,000")${NO_COLOR}"
	case "${1}" in
	"info")
		echo -e "${LOGGING_TIMESTAMP} ${GREEN}[    INFO]: ${NO_COLOR}${2}"
		;;
	"error")
		echo -e "${LOGGING_TIMESTAMP} ${RED}[   ERROR]: ${NO_COLOR}${2}"
		;;
	"warning")
		echo -e "${LOGGING_TIMESTAMP} ${ORANGE}[ WARNING]: ${NO_COLOR}${2}"
		;;
	"debug")
        echo -e "${LOGGING_TIMESTAMP} ${PURPLE}[   DEBUG]: ${NO_COLOR}${2}"
        ;;
    "critical")
        echo -e "${LOGGING_TIMESTAMP} ${CYAN}[CRITICAL]: ${NO_COLOR}${2}"
        ;;
	*)
		echo -e "${LOGGING_TIMESTAMP} ${GREEN}[    INFO]: ${NO_COLOR}${1}"
		;;
	esac
}
